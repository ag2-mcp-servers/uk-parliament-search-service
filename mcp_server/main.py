# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:17:24+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import Extension

app = MCPProxy(
    contact={
        'email': 'data@parliament.uk',
        'name': 'Data & Search team at UK Parliament',
        'url': 'https://www.parliament.uk/',
    },
    description='Performs search on parliament.uk domain. Implements [OpenSearch specification](https://github.com/dewitt/opensearch). Throttled at 10 requests per second per IP address.',
    license={
        'name': 'Open Parliament Licence',
        'url': 'https://www.parliament.uk/site-information/copyright-parliament/open-parliament-licence',
    },
    title='UK Parliament Search Service',
    version='Live',
    servers=[{'url': 'https://api.parliament.uk/search'}],
)


@app.get('/description', tags=['search_operations'])
def get_description():
    """
    OpenSearch description document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/query', tags=['search_operations'])
def get_query(
    q: str,
    start: Optional[float] = None,
    count: Optional[float] = None,
    subdomains: Optional[str] = None,
    in_url_prefixes: Optional[str] = Query(None, alias='inUrlPrefixes'),
):
    """
    Search results
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/query.{extension}', tags=['search_operations'])
def get_query__extension(
    extension: Extension,
    q: str = ...,
    start: Optional[float] = None,
    count: Optional[float] = None,
    subdomains: Optional[str] = None,
    in_url_prefixes: Optional[str] = Query(None, alias='inUrlPrefixes'),
):
    """
    Search results
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
